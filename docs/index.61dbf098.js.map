{"mappings":"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","sources":["node_modules/@noble/ed25519/lib/esm/index.js","node_modules/@noble/secp256k1/lib/esm/index.js","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","src/app.js"],"sourcesContent":["/*! noble-ed25519 - MIT License (c) Paul Miller (paulmillr.com) */\nimport nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _255n = BigInt(255);\nconst CURVE = {\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: _2n ** _255n - BigInt(19),\n    n: _2n ** BigInt(252) + BigInt('27742317777372353535851937790883648493'),\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n};\nexport { CURVE };\nconst B32 = 32;\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    static fromRistrettoHash(hash) {\n        if (typeof hash === 'string')\n            hash = hexToBytes(hash);\n        if (hash.length !== 64)\n            throw new Error('Invalid ristretto hash, need 64 bytes');\n        const r1 = bytes255ToNumberLE(hash.slice(0, B32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hash.slice(B32, B32 * 2));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return R1.add(R2);\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static fromRistrettoBytes(bytes) {\n        if (typeof bytes === 'string')\n            bytes = hexToBytes(bytes);\n        if (bytes.length !== 32)\n            throw new Error('Invalid ristretto hash, need 64 bytes');\n        const { a, d } = CURVE;\n        const emsg = 'ExtendedPoint.fromRistrettoBytes: Cannot convert bytes to Ristretto Point';\n        const s = bytes255ToNumberLE(bytes);\n        if (!equalBytes(numberToBytesPadded(s, B32), bytes) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new ExtendedPoint(x, y, _1n, t);\n    }\n    toRistrettoBytes() {\n        let { x, y, z, t } = this;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2 ** _2n));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberToBytesPadded(s, B32);\n    }\n    equals(other) {\n        const a = this;\n        const b = other;\n        return mod(a.t * b.z) === mod(b.t * a.z);\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const X1 = this.x;\n        const Y1 = this.y;\n        const Z1 = this.z;\n        const { a } = CURVE;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(_2n * Z1 ** _2n);\n        const D = mod(a * A);\n        const E = mod((X1 + Y1) ** _2n - A - B);\n        const G = mod(D + B);\n        const F = mod(G - C);\n        const H = mod(D - B);\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        const X1 = this.x;\n        const Y1 = this.y;\n        const Z1 = this.z;\n        const T1 = this.t;\n        const X2 = other.x;\n        const Y2 = other.y;\n        const Z2 = other.z;\n        const T2 = other.t;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n) {\n            return this.double();\n        }\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = mod(D + C);\n        const G = mod(B + A);\n        const H = mod(D - C);\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        let p = ExtendedPoint.ZERO;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    precomputeWindow(W) {\n        const windows = 256 / W + 1;\n        let points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 256 / W + 1;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return [p, f];\n    }\n    multiply(scalar, affinePoint) {\n        const n = normalizeScalar(scalar);\n        return ExtendedPoint.normalizeZ(this.wNAF(n, affinePoint))[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const x = mod(this.x * invZ);\n        const y = mod(this.y * invZ);\n        return new Point(x, y);\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hash) {\n        const { d, P } = CURVE;\n        const bytes = hash instanceof Uint8Array ? hash : hexToBytes(hash);\n        if (bytes.length !== 32)\n            throw new Error('Point.fromHex: expected 32 bytes');\n        const last = bytes[31];\n        const normedLast = last & ~0x80;\n        const isLastByteOdd = (last & 0x80) !== 0;\n        const normed = Uint8Array.from(Array.from(bytes.slice(0, 31)).concat(normedLast));\n        const y = bytesToNumberLE(normed);\n        if (y >= P)\n            throw new Error('Point.fromHex expects hex <= Fp');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        const privBytes = await getPrivateBytes(privateKey);\n        return Point.BASE.multiply(encodePrivate(privBytes));\n    }\n    toRawBytes() {\n        const hex = numberToHex(this.y);\n        const u8 = new Uint8Array(B32);\n        for (let i = hex.length - 2, j = 0; j < B32 && i >= 0; i -= 2, j++) {\n            u8[j] = parseHexByte(hex[i] + hex[i + 1]);\n        }\n        const mask = this.x & _1n ? 0x80 : 0;\n        u8[B32 - 1] |= mask;\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        return mod((_1n + this.y) * invert(_1n - this.y));\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex);\n        const r = Point.fromHex(hex.slice(0, 32));\n        const s = bytesToNumberLE(hex.slice(32));\n        if (!isWithinCurveOrder(s))\n            throw new Error('Signature.fromHex expects s <= CURVE.n');\n        return new Signature(r, s);\n    }\n    toRawBytes() {\n        const numberBytes = hexToBytes(numberToHex(this.s)).reverse();\n        const sBytes = new Uint8Array(B32);\n        sBytes.set(numberBytes);\n        const res = new Uint8Array(B32 * 2);\n        res.set(this.r.toRawBytes());\n        res.set(sBytes, 32);\n        return res;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, Point, Signature, Signature as SignResult };\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\nfunction numberToHex(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction numberToBytesPadded(num, length = B32) {\n    const hex = numberToHex(num).padStart(length * 2, '0');\n    return hexToBytes(hex).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    let value = _0n;\n    for (let i = 0; i < uint8a.length; i++) {\n        value += BigInt(uint8a[i]) << (BigInt(8) * BigInt(i));\n    }\n    return value;\n}\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & (_2n ** _255n - _1n));\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, modulo = CURVE.P) {\n    const len = nums.length;\n    const scratch = new Array(len);\n    let acc = _1n;\n    for (let i = 0; i < len; i++) {\n        if (nums[i] === _0n)\n            continue;\n        scratch[i] = acc;\n        acc = mod(acc * nums[i], modulo);\n    }\n    acc = invert(acc, modulo);\n    for (let i = len - 1; i >= 0; i--) {\n        if (nums[i] === _0n)\n            continue;\n        let tmp = mod(acc * nums[i], modulo);\n        nums[i] = mod(acc * scratch[i], modulo);\n        acc = tmp;\n    }\n    return nums;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const [_5n, _10n, _20n, _40n, _80n] = [5, 10, 20, 40, 80].map((n) => BigInt(n));\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return pow_p_5_8;\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    let x = mod(u * v3 * pow_2_252_3(u * v7));\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nasync function sha512ToNumberLE(...args) {\n    const messageArray = concatBytes(...args);\n    const hash = await utils.sha512(messageArray);\n    const value = bytesToNumberLE(hash);\n    return mod(value, CURVE.n);\n}\nfunction keyPrefix(privateBytes) {\n    return privateBytes.slice(B32);\n}\nfunction encodePrivate(privateBytes) {\n    const last = B32 - 1;\n    const head = privateBytes.slice(0, B32);\n    head[0] &= 248;\n    head[last] &= 127;\n    head[last] |= 64;\n    return mod(bytesToNumberLE(head), CURVE.n);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hash) {\n    return hash instanceof Uint8Array ? hash : hexToBytes(hash);\n}\nfunction isWithinCurveOrder(num) {\n    return 0 < num && num < CURVE.n;\n}\nconst MAX_PRIV_KEY = _2n ** BigInt(256) - _1n;\nfunction normalizePrivateKey(key) {\n    let bytes;\n    let err = 'Expected 32 bytes of private key';\n    if (typeof key === 'bigint' || (typeof key === 'number' && Number.isSafeInteger(key))) {\n        let num = BigInt(key);\n        if (num < 0 || num > MAX_PRIV_KEY)\n            throw new Error(err);\n        bytes = hexToBytes(num.toString(16).padStart(B32 * 2, '0'));\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error(err);\n        bytes = hexToBytes(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error(err);\n        bytes = key;\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    return bytes;\n}\nasync function getPrivateBytes(privateKey) {\n    return await utils.sha512(normalizePrivateKey(privateKey));\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && num > 0 && Number.isSafeInteger(num))\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nexport async function getPublicKey(privateKey) {\n    const key = await Point.fromPrivateKey(privateKey);\n    return key.toRawBytes();\n}\nexport async function sign(msgHash, privateKey) {\n    const privBytes = await getPrivateBytes(privateKey);\n    const p = encodePrivate(privBytes);\n    const P = Point.BASE.multiply(p);\n    const msg = ensureBytes(msgHash);\n    const r = await sha512ToNumberLE(keyPrefix(privBytes), msg);\n    const R = Point.BASE.multiply(r);\n    const h = await sha512ToNumberLE(R.toRawBytes(), P.toRawBytes(), msg);\n    const S = mod(r + h * p, CURVE.n);\n    const sig = new Signature(R, S);\n    return sig.toRawBytes();\n}\nexport async function verify(sig, msgHash, publicKey) {\n    msgHash = ensureBytes(msgHash);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey);\n    if (!(sig instanceof Signature))\n        sig = Signature.fromHex(sig);\n    const hs = await sha512ToNumberLE(sig.r.toRawBytes(), publicKey.toRawBytes(), msgHash);\n    const Ph = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(hs);\n    const Gs = ExtendedPoint.BASE.multiply(sig.s);\n    const RPh = ExtendedPoint.fromAffine(sig.r).add(Ph);\n    return RPh.subtract(Gs).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    bytesToHex,\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (message) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_1n);\n        return cached;\n    },\n};\n","/*! noble-secp256k1 - MIT License (c) Paul Miller (paulmillr.com) */\nimport nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst POW_2_256 = _2n ** BigInt(256);\nconst CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n};\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    return mod(x ** _3n + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        const a = this;\n        const b = other;\n        const az2 = mod(a.z * a.z);\n        const az3 = mod(a.z * az2);\n        const bz2 = mod(b.z * b.z);\n        const bz3 = mod(b.z * bz2);\n        return mod(a.x * bz2) === mod(az2 * b.x) && mod(a.y * bz3) === mod(az3 * b.y);\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const X1 = this.x;\n        const Y1 = this.y;\n        const Z1 = this.z;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(B ** _2n);\n        const D = mod(_2n * (mod(mod((X1 + B) ** _2n)) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E ** _2n);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint)) {\n            throw new TypeError('JacobianPoint#add: expected JacobianPoint');\n        }\n        const X1 = this.x;\n        const Y1 = this.y;\n        const Z1 = this.z;\n        const X2 = other.x;\n        const Y2 = other.y;\n        const Z2 = other.z;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(Y1 * Z2 * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H ** _2n);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r ** _2n - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar);\n        if (!USE_ENDOMORPHISM) {\n            let p = JacobianPoint.ZERO;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = JacobianPoint.ZERO;\n        let k2p = JacobianPoint.ZERO;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        let points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            let { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const invZ2 = invZ ** _2n;\n        const x = mod(this.x * invZ2);\n        const y = mod(this.y * invZ2 * invZ);\n        return new Point(x, y);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.slice(1));\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.slice(1, 33));\n        const y = bytesToNumber(bytes.slice(33));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const header = bytes[0];\n        if (bytes.length === 32 || (bytes.length === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (bytes.length === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${bytes.length}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        let h = msgHash instanceof Uint8Array ? bytesToNumber(msgHash) : hexToNumber(msgHash);\n        const sig = normalizeSignature(signature);\n        const { r, s } = sig;\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = 2 + (recovery & 1);\n        const P_ = Point.fromHex(`0${prefix}${pad64(r)}`);\n        const sP = JacobianPoint.fromAffine(P_).multiplyUnsafe(s);\n        const hG = JacobianPoint.BASE.multiply(h);\n        const rinv = invert(r, CURVE.n);\n        const Q = sP.subtract(hG).multiplyUnsafe(rinv);\n        const point = Q.toAffine();\n        point.assertValidity();\n        return point;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = pad64(this.x);\n        if (isCompressed) {\n            return `${this.y & _1n ? '03' : '02'}${x}`;\n        }\n        else {\n            return `04${x}${pad64(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { P } = CURVE;\n        const { x, y } = this;\n        if (x === _0n || y === _0n || x >= P || y >= P)\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if ((left - right) % P !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHex(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHex(this.r));\n        const rLen = numberToHex(rHex.length / 2);\n        const sLen = numberToHex(sHex.length / 2);\n        const length = numberToHex(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return pad64(this.r) + pad64(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction pad64(num) {\n    if (num > POW_2_256)\n        throw new Error('pad64: invalid number');\n    return num.toString(16).padStart(64, '0');\n}\nfunction pad32b(num) {\n    return hexToBytes(pad64(num));\n}\nfunction numberToHex(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction parseHexByte(hexByte) {\n    if (hexByte.length !== 2)\n        throw new Error('Invalid byte sequence');\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? hex : hexToBytes(hex);\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && num > 0 && Number.isSafeInteger(num))\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= 0 ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, n = CURVE.P) {\n    const len = nums.length;\n    const scratch = new Array(len);\n    let acc = _1n;\n    for (let i = 0; i < len; i++) {\n        if (nums[i] === _0n)\n            continue;\n        scratch[i] = acc;\n        acc = mod(acc * nums[i], n);\n    }\n    acc = invert(acc, n);\n    for (let i = len - 1; i >= 0; i--) {\n        if (nums[i] === _0n)\n            continue;\n        const tmp = mod(acc * nums[i], n);\n        nums[i] = mod(acc * scratch[i], n);\n        acc = tmp;\n    }\n    return nums;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst POW_2_128 = _2n ** BigInt(128);\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n    const b2 = a1;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128)\n        throw new Error('splitScalarEndo: Endomorphism failed');\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    if (typeof hash !== 'string')\n        hash = bytesToHex(hash);\n    let msg = hexToNumber(hash || '0');\n    const byteLength = hash.length / 2;\n    const delta = byteLength * 8 - 256;\n    if (delta > 0) {\n        msg = msg >> BigInt(delta);\n    }\n    if (msg >= CURVE.n) {\n        msg -= CURVE.n;\n    }\n    return msg;\n}\nfunction _abc6979(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid msgHash, not \"${msgHash}\"`);\n    const num = typeof msgHash === 'string' ? hexToNumber(msgHash) : bytesToNumber(msgHash);\n    const h1 = pad32b(num);\n    const h1n = bytesToNumber(h1);\n    const x = pad32b(privateKey);\n    let v = new Uint8Array(32).fill(1);\n    let k = new Uint8Array(32).fill(0);\n    const b0 = Uint8Array.from([0x00]);\n    const b1 = Uint8Array.from([0x01]);\n    let xh1 = concatBytes(x, h1);\n    if (extraEntropy != null) {\n        const e = pad32b(typeof extraEntropy === 'string' ? hexToNumber(extraEntropy) : bytesToNumber(extraEntropy));\n        if (e.length !== 32)\n            throw new Error('secp256k1: Expected 32 bytes of extra data');\n        xh1 = concatBytes(xh1, e);\n    }\n    return { xh1, h1n, v, k, b0, b1 };\n}\nasync function getQRSrfc6979(msgHash, privateKey, extraEntropy) {\n    const privKey = normalizePrivateKey(privateKey);\n    let { xh1, h1n, v, k, b0, b1 } = _abc6979(msgHash, privKey, extraEntropy);\n    const hmac = utils.hmacSha256;\n    k = await hmac(k, v, b0, xh1);\n    v = await hmac(k, v);\n    k = await hmac(k, v, b1, xh1);\n    v = await hmac(k, v);\n    for (let i = 0; i < 1000; i++) {\n        v = await hmac(k, v);\n        const qrs = calcQRSFromK(v, h1n, privKey);\n        if (qrs)\n            return qrs;\n        k = await hmac(k, v, b0);\n        v = await hmac(k, v);\n    }\n    throw new TypeError('secp256k1: Tried 1,000 k values for sign(), all were invalid');\n}\nfunction getQRSrfc6979Sync(msgHash, privateKey, extraEntropy) {\n    const privKey = normalizePrivateKey(privateKey);\n    let { xh1, h1n, v, k, b0, b1 } = _abc6979(msgHash, privKey, extraEntropy);\n    const hmac = utils.hmacSha256Sync;\n    if (!hmac)\n        throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n    k = hmac(k, v, b0, xh1);\n    if (k instanceof Promise)\n        throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n    v = hmac(k, v);\n    k = hmac(k, v, b1, xh1);\n    v = hmac(k, v);\n    for (let i = 0; i < 1000; i++) {\n        v = hmac(k, v);\n        const qrs = calcQRSFromK(v, h1n, privKey);\n        if (qrs)\n            return qrs;\n        k = hmac(k, v, b0);\n        v = hmac(k, v);\n    }\n    throw new TypeError('secp256k1: Tried 1,000 k values for sign(), all were invalid');\n}\nfunction isWithinCurveOrder(num) {\n    return 0 < num && num < CURVE.n;\n}\nfunction calcQRSFromK(v, msg, priv) {\n    const k = bytesToNumber(v);\n    if (!isWithinCurveOrder(k))\n        return;\n    const max = CURVE.n;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, max);\n    const s = mod(invert(k, max) * (msg + r * priv), max);\n    if (r === _0n || s === _0n)\n        return;\n    return { q, r, s };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes();\n}\nfunction isPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction QRSToSig(qrs, opts) {\n    const { q, r, s } = qrs;\n    const defaultOpts = { canonical: true, der: true };\n    let { canonical, der, recovered } = Object.assign(defaultOpts, opts);\n    let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n);\n    let sig = new Signature(r, s);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    return QRSToSig(await getQRSrfc6979(msgHash, privKey, opts.extraEntropy), opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    return QRSToSig(getQRSrfc6979Sync(msgHash, privKey, opts.extraEntropy), opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    if (h === _0n)\n        return false;\n    let pubKey;\n    try {\n        pubKey = JacobianPoint.fromAffine(normalizePublicKey(publicKey));\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const s1 = invert(s, n);\n    const u1 = mod(h * s1, n);\n    const u2 = mod(r * s1, n);\n    const Ghs1 = JacobianPoint.BASE.multiply(u1);\n    const Prs1 = pubKey.multiplyUnsafe(u2);\n    const R = Ghs1.add(Prs1).toAffine();\n    const v = mod(R.x, n);\n    return v === r;\n}\nasync function taggedHash(tag, ...messages) {\n    const tagB = new Uint8Array(tag.split('').map((c) => c.charCodeAt(0)));\n    const tagH = await utils.sha256(tagB);\n    const h = await utils.sha256(concatBytes(tagH, tagH, ...messages));\n    return bytesToNumber(h);\n}\nasync function createChallenge(x, P, message) {\n    const rx = pad32b(x);\n    const t = await taggedHash('BIP0340/challenge', rx, P.toRawX(), message);\n    return mod(t, CURVE.n);\n}\nfunction hasEvenY(point) {\n    return mod(point.y, _2n) === _0n;\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        if (r <= _0n || s <= _0n || r >= CURVE.P || s >= CURVE.n)\n            throw new Error('Invalid signature');\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64) {\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        }\n        const r = bytesToNumber(bytes.slice(0, 32));\n        const s = bytesToNumber(bytes.slice(32));\n        return new SchnorrSignature(r, s);\n    }\n    toHex() {\n        return pad64(this.r) + pad64(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nasync function schnorrSign(msgHash, privateKey, auxRand = utils.randomBytes()) {\n    if (msgHash == null)\n        throw new TypeError(`sign: Expected valid message, not \"${msgHash}\"`);\n    if (!privateKey)\n        privateKey = _0n;\n    const { n } = CURVE;\n    const m = ensureBytes(msgHash);\n    const d0 = normalizePrivateKey(privateKey);\n    const rand = ensureBytes(auxRand);\n    if (rand.length !== 32)\n        throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    const P = Point.fromPrivateKey(d0);\n    const d = hasEvenY(P) ? d0 : n - d0;\n    const t0h = await taggedHash('BIP0340/aux', rand);\n    const t = d ^ t0h;\n    const k0h = await taggedHash('BIP0340/nonce', pad32b(t), P.toRawX(), m);\n    const k0 = mod(k0h, n);\n    if (k0 === _0n)\n        throw new Error('sign: Creation of signature failed. k is zero');\n    const R = Point.fromPrivateKey(k0);\n    const k = hasEvenY(R) ? k0 : n - k0;\n    const e = await createChallenge(R.x, P, m);\n    const sig = new SchnorrSignature(R.x, mod(k + e * d, n));\n    const isValid = await schnorrVerify(sig.toRawBytes(), m, P.toRawX());\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig.toRawBytes();\n}\nasync function schnorrVerify(signature, msgHash, publicKey) {\n    const sig = signature instanceof SchnorrSignature ? signature : SchnorrSignature.fromHex(signature);\n    const m = typeof msgHash === 'string' ? hexToBytes(msgHash) : msgHash;\n    const P = normalizePublicKey(publicKey);\n    const e = await createChallenge(sig.r, P, m);\n    const sG = Point.fromPrivateKey(sig.s);\n    const eP = P.multiply(e);\n    const R = sG.subtract(eP);\n    if (R.equals(Point.BASE) || !hasEvenY(R) || R.x !== sig.r)\n        return false;\n    return true;\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        let i = 8;\n        while (i--) {\n            const b32 = utils.randomBytes(32);\n            const num = bytesToNumber(b32);\n            if (isWithinCurveOrder(num) && num !== _1n)\n                return b32;\n        }\n        throw new Error('Valid private key was not found in 8 iterations. PRNG is broken');\n    },\n    bytesToHex,\n    sha256: async (message) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            return Uint8Array.from(createHash('sha256').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            for (const message of messages) {\n                hash.update(message);\n            }\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","import * as ed25519 from \"@noble/ed25519\";\nimport * as secp256k1 from \"@noble/secp256k1\";\n\nasync function generateEd25519KeyPair() {\n  const privateKey = ed25519.utils.randomPrivateKey();\n  const publicKey = await ed25519.getPublicKey(privateKey);\n  return { privateKey, publicKey };\n}\n\nfunction generateSecp256k1KeyPair() {\n  const privateKey = secp256k1.utils.randomPrivateKey();\n  const publicKey = secp256k1.getPublicKey(privateKey);\n  return { privateKey, publicKey };\n}\n\nfunction hex(array) {\n  return Buffer.from(array).toString(\"hex\");\n}\n\n(async function () {\n  console.log(\"Testing\");\n  console.log(\"RANDOM KEY\", ed25519.utils.randomPrivateKey());\n  const { privateKey, publicKey } = await generateEd25519KeyPair();\n  document.getElementById(\"ed25519-public-key\").innerText = hex(publicKey);\n  document.getElementById(\"ed25519-private-key\").innerText = hex(privateKey);\n  const { privateKey: a, publicKey: b } = generateSecp256k1KeyPair();\n  document.getElementById(\"secp256k1-public-key\").innerText = hex(a);\n  document.getElementById(\"secp256k1-private-key\").innerText = hex(b);\n})();\n"],"names":["$64459a78149bedbf$var$_0n","BigInt","$64459a78149bedbf$var$_1n","$64459a78149bedbf$var$_2n","$64459a78149bedbf$var$_255n","$64459a78149bedbf$export$8ff8607b70325343","a","d","P","n","h","Gx","Gy","$64459a78149bedbf$var$SQRT_M1","$64459a78149bedbf$var$SQRT_AD_MINUS_ONE","$64459a78149bedbf$var$INVSQRT_A_MINUS_D","$64459a78149bedbf$var$ONE_MINUS_D_SQ","$64459a78149bedbf$var$D_MINUS_ONE_SQ","$64459a78149bedbf$export$c82dbe8d384844da","p","$64459a78149bedbf$export$baf26146a414f24a","TypeError","equals","ZERO","x","y","$64459a78149bedbf$var$mod","points","toInv","nums","modulo","len","length","scratch","Array","acc","i","$64459a78149bedbf$var$invert","i1","tmp","$64459a78149bedbf$var$invertBatch","map","z","toAffine","this","toAffineBatch","fromAffine","hash","$64459a78149bedbf$var$hexToBytes","Error","r1","$64459a78149bedbf$var$bytes255ToNumberLE","slice","R1","calcElligatorRistrettoMap","r2","$64459a78149bedbf$var$B32","R2","add","r0","r","Ns","c","D","isValid","Ns_D_is_sq","value","s","$64459a78149bedbf$var$uvRatio","s_","$64459a78149bedbf$var$edIsNegative","Nt","s2","W0","W1","W2","W3","bytes","emsg","b1","b2","$64459a78149bedbf$var$equalBytes","$64459a78149bedbf$var$numberToBytesPadded","u1","u2","u1_2","u2_2","v","I","$64459a78149bedbf$var$invertSqrt","Dx","Dy","t","toRistrettoBytes","invsqrt","D1","D2","zInv","_x","_y","other","b","negate","double","X1","Y1","Z1","A","B","C","E","G","F","H","X3","Y3","T3","Z3","T1","X2","Y2","Z2","T2","subtract","multiplyUnsafe","scalar","$64459a78149bedbf$var$normalizeScalar","precomputeWindow","W","windows","base","window","push","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","$64459a78149bedbf$var$pointPrecomputes","get","normalizeZ","set","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","multiply","invZ","WeakMap","_setWindowSize","delete","Uint8Array","last","normedLast","isLastByteOdd","$64459a78149bedbf$var$bytesToNumberLE","from","concat","y2","u","privateKey","privBytes","$64459a78149bedbf$var$getPrivateBytes","$64459a78149bedbf$var$encodePrivate","toRawBytes","hex","$64459a78149bedbf$var$numberToHex","u8","j","$64459a78149bedbf$var$parseHexByte","toHex","$64459a78149bedbf$var$bytesToHex","toX25519","$64459a78149bedbf$var$hexes","toString","padStart","uint8a","hexByte","byte","parseInt","isNaN","array","num","reverse","res","number","q","m","$64459a78149bedbf$var$pow2","power","v3","v7","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","$64459a78149bedbf$var$pow_2_252_3","vx2","root1","root2","useRoot1","useRoot2","noRoot","privateBytes","head","$64459a78149bedbf$var$isWithinCurveOrder","$64459a78149bedbf$var$MAX_PRIV_KEY","$64459a78149bedbf$export$eab97d15b1788b8d","sha512","key","err","isSafeInteger","$64459a78149bedbf$var$normalizePrivateKey","$64459a78149bedbf$var$crypto","node","$parcel$interopDefault","$f106d90b65682ef6$exports","web","self","crypto","undefined","TORSION_SUBGROUP","randomBytes","bytesLength","getRandomValues","buffer","randomPrivateKey","async","message","subtle","digest","createHash","update","precompute","point","$f3ca49315bba3b22$var$_0n","$f3ca49315bba3b22$var$_1n","$f3ca49315bba3b22$var$_2n","$f3ca49315bba3b22$var$_3n","$f3ca49315bba3b22$var$_8n","$f3ca49315bba3b22$var$POW_2_256","$f3ca49315bba3b22$export$8ff8607b70325343","beta","$f3ca49315bba3b22$var$weistrass","$f3ca49315bba3b22$var$mod","$f3ca49315bba3b22$var$USE_ENDOMORPHISM","$f3ca49315bba3b22$var$JacobianPoint","$f3ca49315bba3b22$export$baf26146a414f24a","$f3ca49315bba3b22$var$invert","$f3ca49315bba3b22$var$invertBatch","az2","az3","bz2","bz3","Z1Z1","Z2Z2","U1","U2","S1","S2","HH","HHH","V","$f3ca49315bba3b22$var$normalizeScalar","k1neg","k1","k2neg","k2","$f3ca49315bba3b22$var$splitScalarEndo","k1p","k2p","$f3ca49315bba3b22$var$pointPrecomputes","fake","f1p","f2p","invZ2","isShort","$f3ca49315bba3b22$var$bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","$f3ca49315bba3b22$var$pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","$f3ca49315bba3b22$var$sqrtMod","isYOdd","assertValidity","$f3ca49315bba3b22$var$ensureBytes","header","fromCompressedHex","fromUncompressedHex","$f3ca49315bba3b22$var$normalizePrivateKey","msgHash","signature","recovery","$f3ca49315bba3b22$var$hexToNumber","sig","$f3ca49315bba3b22$var$normalizeSignature","prefix","P_","fromHex","$f3ca49315bba3b22$var$pad64","sP","hG","rinv","isCompressed","$f3ca49315bba3b22$var$hexToBytes","toHexX","toRawX","msg","$f3ca49315bba3b22$var$sliceDER","$f3ca49315bba3b22$var$parseDERInt","data","$f3ca49315bba3b22$var$bytesToHex","subarray","left","$f3ca49315bba3b22$export$848620f5f2f26e86","arr","name","str","sBytes","rBytesLeft","$f3ca49315bba3b22$var$parseDERSignature","fromDER","$f3ca49315bba3b22$var$isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","$f3ca49315bba3b22$var$numberToHex","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","$f3ca49315bba3b22$var$concatBytes","arrays","reduce","result","pad","$f3ca49315bba3b22$var$hexes","$f3ca49315bba3b22$var$parseHexByte","$f3ca49315bba3b22$var$divNearest","$f3ca49315bba3b22$var$POW_2_128","k","a1","a2","c1","c2","error","fromCompact","$f3ca49315bba3b22$var$crypto","$f3ca49315bba3b22$export$eab97d15b1788b8d","isValidPrivateKey","b32","sha256","hmacSha256","messages","ckey","importKey","sign","createHmac","sha256Sync","hmacSha256Sync","$e18623bc64833dba$export$a143d493d941bafc","$9f0d3ba832e53302$export$d622b2ad8d90c771","$9f0d3ba832e53302$export$6100ba28696e12de","b64","lens","$9f0d3ba832e53302$var$getLens","validLen","placeHoldersLen","$9f0d3ba832e53302$var$Arr","$9f0d3ba832e53302$var$_byteLength","curByte","$9f0d3ba832e53302$var$revLookup","charCodeAt","uint8","extraBytes","parts","maxChunkLength","len2","$9f0d3ba832e53302$var$encodeChunk","$9f0d3ba832e53302$var$lookup","join","$b88dc7ce0b1086e3$export$aafa59e2e03f2942","$b88dc7ce0b1086e3$export$68d8715fc104d294","$9f0d3ba832e53302$var$code","$9f0d3ba832e53302$var$i","$9f0d3ba832e53302$var$len","indexOf","start","end","output","isLE","mLen","nBytes","e","eLen","eMax","eBias","nBits","NaN","Infinity","pow","rt","floor","log","LN2","$e18623bc64833dba$var$customInspectSymbol","Symbol","$e18623bc64833dba$var$Buffer","$e18623bc64833dba$var$createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","$e18623bc64833dba$var$allocUnsafe","$e18623bc64833dba$var$from","string","encoding","isEncoding","$e18623bc64833dba$var$byteLength","actual","write","$e18623bc64833dba$var$fromString","ArrayBuffer","isView","arrayView","$e18623bc64833dba$var$isInstance","copy","$e18623bc64833dba$var$fromArrayBuffer","byteOffset","byteLength","$e18623bc64833dba$var$fromArrayLike","$e18623bc64833dba$var$fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","$e18623bc64833dba$var$checked","$e18623bc64833dba$var$numberIsNaN","type","isArray","$e18623bc64833dba$var$fromObject","toPrimitive","$e18623bc64833dba$var$assertSize","size","mustMatch","arguments","loweredCase","$e18623bc64833dba$var$utf8ToBytes","$e18623bc64833dba$var$base64ToBytes","toLowerCase","$e18623bc64833dba$var$slowToString","$e18623bc64833dba$var$hexSlice","$e18623bc64833dba$var$utf8Slice","$e18623bc64833dba$var$asciiSlice","$e18623bc64833dba$var$latin1Slice","$e18623bc64833dba$var$base64Slice","$e18623bc64833dba$var$utf16leSlice","$e18623bc64833dba$var$swap","$e18623bc64833dba$var$bidirectionalIndexOf","val","dir","$e18623bc64833dba$var$arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","$e18623bc64833dba$var$hexWrite","remaining","strLen","parsed","substr","$e18623bc64833dba$var$utf8Write","$e18623bc64833dba$var$blitBuffer","$e18623bc64833dba$var$asciiWrite","byteArray","$e18623bc64833dba$var$asciiToBytes","$e18623bc64833dba$var$base64Write","$e18623bc64833dba$var$ucs2Write","units","hi","lo","$e18623bc64833dba$var$utf16leToBytes","min","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","fromCharCode","apply","$e18623bc64833dba$var$decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","$e18623bc64833dba$var$typedArraySupport","console","defineProperty","enumerable","poolSize","alloc","fill","$e18623bc64833dba$var$alloc","allocUnsafe","allocUnsafeSlow","_isBuffer","compare","list","pos","swap16","swap32","swap64","toLocaleString","inspect","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","$e18623bc64833dba$var$hexSliceLookupTable","$e18623bc64833dba$var$checkOffset","ext","$e18623bc64833dba$var$checkInt","max","$e18623bc64833dba$var$checkIEEE754","$e18623bc64833dba$var$writeFloat","littleEndian","noAssert","$e18623bc64833dba$var$writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","code","$e18623bc64833dba$var$INVALID_BASE64_RE","leadSurrogate","split","$e18623bc64833dba$var$base64clean","src","dst","constructor","alphabet","table","i16","$a1ad5f7ba158391f$var$generateEd25519KeyPair","publicKey","fromPrivateKey","$64459a78149bedbf$export$889def73691f9837","$a1ad5f7ba158391f$var$generateSecp256k1KeyPair","$f3ca49315bba3b22$export$889def73691f9837","$a1ad5f7ba158391f$var$hex","$a1ad5f7ba158391f$require$Buffer","document","getElementById","innerText"],"version":3,"file":"index.61dbf098.js.map"}